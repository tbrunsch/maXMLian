Features:

* Instance reusage: Instances of one level are immediately reused vs. reused after k elements vs. never reused

* Seekable: ExtendedXmlEventReader has a position information (struct containing all relevant position information) that can be queried or set; several positioning strategies are possible and could exist in parallel: seekable due to SeekableByteChannel (no data stored additionally in memory) vs. buffering in memory (=> nodes need a free() method to inform the framework to release memory; both approaches have to be tested because it is not clear whether the StAX reader works correctly when changing the position within an input stream) vs. keeping StAX events in memory (Node.free() required as well) vs. no going backwards at all
** Decision: Do not offer additional Node methods to support only a single random access approach (here: in-memory). The user can write some PositionController himself and is responsible then for freeing memory he does not need anymore
** Write a unit test for StAX that tests how it reacts on positional changes. Things to test:
  *** Re-read the same event again
  *** Re-read the whole document again
  *** Go back to a fixed position in the document again
  *** Particularly test the case after parsing the start element event but before parsing end element of an empty element.
** Repositioning will not work if the state of the StAX parser depends on events it has previously read. Find out which these might be. Example: If there is a namespace that holds for all nodes within the current subtree.
** While it suffices for a node to store depth, node counter of its depth and some position value, this does not suffice to restore all state information of our event reader: After all, the node counters must be restored on every level. It is probably better to store information in the our event reader for each event counter that allow reconstructing these information. This should only be done if random access support is configured by the user. Key idea here would be to store +1, -1 or 0 for each event, where +1 are start events, -1 are end events, and 0 are other events.