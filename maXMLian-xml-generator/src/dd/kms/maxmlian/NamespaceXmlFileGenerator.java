package dd.kms.maxmlian;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

/**
 * This class generates an XML file with nested elements that
 * override some namespaces defined in the parent scope.
 */
public class NamespaceXmlFileGenerator extends AbstractXmlFileGenerator
{
	private static final String	NAMESPACE_1			= "http://maxmlian.kms.dd";
	private static final String	NAMESPACE_2			= "http://hippodamus.kms.dd";
	private static final String	PREFIX_1			= "a";
	private static final String	PREFIX_2			= "b";

	public synchronized void generate(Path file) throws IOException {
		try (BufferedWriter writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {
			reset(writer);
			write("<?xml version=\"1.0\"?>");
			write("<!-- autogenerated by class NamespaceXmlFileGenerator -->");
			writeSample();
		}
	}

	private void writeSample() throws IOException {
		String attributeDefinitions = new Attributes()
			.add("xmlns", NAMESPACE_1)
			.add("xmlns:" + PREFIX_1, NAMESPACE_1)
			.add("xmlns:" + PREFIX_2, NAMESPACE_2)
			.getDefinitions();
		try (Element root = new Element("sample", attributeDefinitions)) {
			writeElements();
		}
	}

	private void writeElements() throws IOException {
		if (getDepth() > 3) {
			return;
		}
		for (String prefix : Arrays.asList(null, PREFIX_1, PREFIX_2)) {
			final String elementName;
			final String paramName;
			final String namespaceAttribute;
			if (prefix != null) {
				elementName = prefix + ":element";
				paramName = prefix + ":param";
				namespaceAttribute = "xmlns:" + prefix;
			} else {
				elementName = "element";
				paramName = "param";
				namespaceAttribute = "xmlns";
			}
			for (boolean changeNamespace : Arrays.asList(false, true)) {
				Attributes attributes = new Attributes()
					.add(paramName, prefix != null ? prefix : "");
				if (changeNamespace) {
					String namespace = PREFIX_2.equals(prefix) ? NAMESPACE_1 : NAMESPACE_2;
					attributes.add(namespaceAttribute, namespace);
				}
				try (Element ignored = new Element(elementName, attributes.getDefinitions())) {
					writeElements();
				}
			}
		}
	}
}
